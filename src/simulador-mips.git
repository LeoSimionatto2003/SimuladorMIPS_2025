import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext

class MIPSSimulator:
    def __init__(self):
        self.reset()

    def reset(self):
        self.regs = {f"${name}{i}": 0 for name in ["t", "s"] for i in range(8)}
        self.regs.update({"$zero": 0, "$sp": 0x0FFC, "$ra": 0, "$pc": 0})
        self.memory = [0] * 4096
        self.instrucoes = []
        self.log = []

    def reg_val(self, reg):
        return 0 if reg == "$zero" else self.regs.get(reg, 0)

    def set_reg(self, reg, val):
        if reg != "$zero":
            self.regs[reg] = val & 0xFFFFFFFF

    def montar_labels(self, codigo):
        labels, instrucoes = {}, []
        linha = 0
        for linha_original in codigo:
            if linha_original.strip().endswith(":"):
                labels[linha_original.strip()[:-1]] = linha
            else:
                instrucoes.append(linha_original.strip())
                linha += 1
        for i, instr in enumerate(instrucoes):
            tokens = instr.replace(",", "").split()
            op = tokens[0]
            if op in ("beq", "bne") and tokens[-1] in labels:
                offset = labels[tokens[-1]] - (i + 1)
                tokens[-1] = str(offset)
                instrucoes[i] = " ".join(tokens)
            elif op in ("j", "jal") and tokens[1] in labels:
                tokens[1] = str(labels[tokens[1]])
                instrucoes[i] = " ".join(tokens)
        return instrucoes

    def load_word(self, addr):
        return (self.memory[addr] << 24) | (self.memory[addr+1] << 16) | (self.memory[addr+2] << 8) | self.memory[addr+3]

    def store_word(self, addr, val):
        for i in range(4):
            self.memory[addr + 3 - i] = (val >> (8 * i)) & 0xFF

    def load_half(self, addr):
        return (self.memory[addr] << 8) | self.memory[addr+1]

    def store_half(self, addr, val):
        self.memory[addr] = (val >> 8) & 0xFF
        self.memory[addr+1] = val & 0xFF

    def execute_step(self):
        pc = self.regs["$pc"]
        if pc >= len(self.instrucoes):
            return False
        instr = self.instrucoes[pc]
        self.log.append(f"{pc:02}: {instr}")
        tokens = instr.replace(",", "").split()
        op = tokens[0]
        try:
            if op == "ori":
                rt, rs, imm = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rt, self.reg_val(rs) | imm)
            elif op == "addi":
                rt, rs, imm = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rt, self.reg_val(rs) + imm)
            elif op == "add":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, self.reg_val(rs) + self.reg_val(rt))
            elif op == "sub":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, self.reg_val(rs) - self.reg_val(rt))
            elif op == "and":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, self.reg_val(rs) & self.reg_val(rt))
            elif op == "or":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, self.reg_val(rs) | self.reg_val(rt))
            elif op == "nor":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, ~(self.reg_val(rs) | self.reg_val(rt)) & 0xFFFFFFFF)
            elif op == "andi":
                rt, rs, imm = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rt, self.reg_val(rs) & imm)
            elif op == "sll":
                rd, rt, shamt = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rd, self.reg_val(rt) << shamt)
            elif op == "srl":
                rd, rt, shamt = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rd, self.reg_val(rt) >> shamt)
            elif op == "slt":
                rd, rs, rt = tokens[1], tokens[2], tokens[3]
                self.set_reg(rd, 1 if self.reg_val(rs) < self.reg_val(rt) else 0)
            elif op == "slti":
                rt, rs, imm = tokens[1], tokens[2], int(tokens[3])
                self.set_reg(rt, 1 if self.reg_val(rs) < imm else 0)
            elif op == "beq":
                rs, rt, offset = tokens[1], tokens[2], int(tokens[3])
                if self.reg_val(rs) == self.reg_val(rt):
                    self.regs["$pc"] += offset
                    return True
            elif op == "bne":
                rs, rt, offset = tokens[1], tokens[2], int(tokens[3])
                if self.reg_val(rs) != self.reg_val(rt):
                    self.regs["$pc"] += offset
                    return True
            elif op == "j":
                addr = int(tokens[1])
                self.regs["$pc"] = addr
                return True
            elif op == "lw":
                rt, offset = tokens[1], tokens[2]
                imm, rs = offset.replace(")", "").split("(")
                self.set_reg(rt, self.load_word(self.reg_val(rs) + int(imm)))
            elif op == "sw":
                rt, offset = tokens[1], tokens[2]
                imm, rs = offset.replace(")", "").split("(")
                self.store_word(self.reg_val(rs) + int(imm), self.reg_val(rt))
            elif op == "lh":
                rt, offset = tokens[1], tokens[2]
                imm, rs = offset.replace(")", "").split("(")
                self.set_reg(rt, self.load_half(self.reg_val(rs) + int(imm)))
            elif op == "sh":
                rt, offset = tokens[1], tokens[2]
                imm, rs = offset.replace(")", "").split("(")
                self.store_half(self.reg_val(rs) + int(imm), self.reg_val(rt))
            else:
                raise Exception(f"Instrução não implementada: {op}")
        except Exception as e:
            self.log.append(f"[Erro] {instr} → {e}")
            raise e
        self.regs["$pc"] += 1
        return True

    def execute_all(self):
        while self.execute_step():
            pass

    def dump_regs(self):
        return {k: f"0x{v:08X}" for k, v in sorted(self.regs.items())}

    def dump_memory(self):
        return {f"{i:04X}": f"{b:02X}" for i, b in enumerate(self.memory) if b != 0}


# Interface Gráfica
class MIPSApp:
    def __init__(self, root):
        self.sim = MIPSSimulator()
        self.root = root
        root.title("Simulador MIPS")

        self.code = scrolledtext.ScrolledText(root, width=80, height=18)
        self.code.pack(padx=10, pady=5)

        frame = tk.Frame(root)
        frame.pack()

        tk.Button(frame, text="Executar Programa", command=self.run_all).pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Próxima Instrução", command=self.run_step).pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Resetar", command=self.reset).pack(side=tk.LEFT, padx=5)
        tk.Button(frame, text="Exportar Registradores", command=self.export_regs).pack(side=tk.LEFT, padx=5)

        self.output = scrolledtext.ScrolledText(root, width=80, height=10, state="disabled")
        self.output.pack(padx=10, pady=5)

        self.mem = scrolledtext.ScrolledText(root, width=80, height=6, state="disabled")
        self.mem.pack(padx=10, pady=5)

    def run_all(self):
        try:
            self.prepare()
            self.sim.execute_all()
            self.refresh()
        except Exception as e:
            messagebox.showerror("Erro de Execução", str(e))

    def run_step(self):
        try:
            self.prepare()
            self.sim.execute_step()
            self.refresh()
        except Exception as e:
            messagebox.showerror("Erro na instrução", str(e))

    def prepare(self):
        if not self.sim.instrucoes:
            codigo = [l.strip() for l in self.code.get("1.0", tk.END).splitlines() if l.strip()]
            has_labels = any(line.endswith(":") for line in codigo)
            self.sim.instrucoes = self.sim.montar_labels(codigo) if has_labels else codigo

    def refresh(self):
        self.output.configure(state="normal")
        self.output.delete("1.0", tk.END)
        for r, v in self.sim.dump_regs().items():
            self.output.insert(tk.END, f"{r}: {v}\n")
        self.output.insert(tk.END, "\nExecução:\n" + "\n".join(self.sim.log))
        self.output.configure(state="disabled")

        self.mem.configure(state="normal")
        self.mem.delete("1.0", tk.END)
        for addr, val in self.sim.dump_memory().items():
            self.mem.insert(tk.END, f"{addr}: {val}\n")
        self.mem.configure(state="disabled")

    def reset(self):
        self.sim.reset()
        self.output.configure(state="normal")
        self.output.delete("1.0", tk.END)
        self.output.configure(state="disabled")
        self.mem.configure(state="normal")
        self.mem.delete("1.0", tk.END)
        self.mem.configure(state="disabled")

    def export_regs(self):
        with filedialog.asksaveasfile(mode="w", defaultextension=".txt") as f:
            for reg, val in self.sim.dump_regs().items():
                f.write(f"{reg}: {val}\n")


if __name__ == "__main__":
    root = tk.Tk()
    app = MIPSApp(root)
    root.mainloop()
